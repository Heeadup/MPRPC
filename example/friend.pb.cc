// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fixbug {

namespace {

const ::google::protobuf::Descriptor* GetFriendResultCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendResultCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* GetFriendServiceRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_friend_2eproto() {
  protobuf_AddDesc_friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.proto");
  GOOGLE_CHECK(file != NULL);
  GetFriendResultCode_descriptor_ = file->message_type(0);
  static const int GetFriendResultCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendResultCode, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendResultCode, errmsg_),
  };
  GetFriendResultCode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFriendResultCode_descriptor_,
      GetFriendResultCode::default_instance_,
      GetFriendResultCode_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFriendResultCode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendResultCode, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendResultCode, _is_default_instance_));
  GetFriendRequest_descriptor_ = file->message_type(1);
  static const int GetFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRequest, name_),
  };
  GetFriendRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFriendRequest_descriptor_,
      GetFriendRequest::default_instance_,
      GetFriendRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFriendRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRequest, _is_default_instance_));
  GetFriendResponse_descriptor_ = file->message_type(2);
  static const int GetFriendResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendResponse, name_),
  };
  GetFriendResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFriendResponse_descriptor_,
      GetFriendResponse::default_instance_,
      GetFriendResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFriendResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendResponse, _is_default_instance_));
  GetFriendServiceRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFriendResultCode_descriptor_, &GetFriendResultCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFriendRequest_descriptor_, &GetFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFriendResponse_descriptor_, &GetFriendResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2eproto() {
  delete GetFriendResultCode::default_instance_;
  delete GetFriendResultCode_reflection_;
  delete GetFriendRequest::default_instance_;
  delete GetFriendRequest_reflection_;
  delete GetFriendResponse::default_instance_;
  delete GetFriendResponse_reflection_;
}

void protobuf_AddDesc_friend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014friend.proto\022\006fixbug\"6\n\023GetFriendResul"
    "tCode\022\017\n\007errcode\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014\","
    "\n\020GetFriendRequest\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002"
    " \003(\014\"N\n\021GetFriendResponse\022+\n\006result\030\001 \001("
    "\0132\033.fixbug.GetFriendResultCode\022\014\n\004name\030\002"
    " \003(\0142W\n\023GetFriendServiceRpc\022@\n\tGetfriend"
    "\022\030.fixbug.GetFriendRequest\032\031.fixbug.GetF"
    "riendResponseB\003\200\001\001b\006proto3", 306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  GetFriendResultCode::default_instance_ = new GetFriendResultCode();
  GetFriendRequest::default_instance_ = new GetFriendRequest();
  GetFriendResponse::default_instance_ = new GetFriendResponse();
  GetFriendResultCode::default_instance_->InitAsDefaultInstance();
  GetFriendRequest::default_instance_->InitAsDefaultInstance();
  GetFriendResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2eproto {
  StaticDescriptorInitializer_friend_2eproto() {
    protobuf_AddDesc_friend_2eproto();
  }
} static_descriptor_initializer_friend_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendResultCode::kErrcodeFieldNumber;
const int GetFriendResultCode::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendResultCode::GetFriendResultCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.GetFriendResultCode)
}

void GetFriendResultCode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetFriendResultCode::GetFriendResultCode(const GetFriendResultCode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.GetFriendResultCode)
}

void GetFriendResultCode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = 0;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetFriendResultCode::~GetFriendResultCode() {
  // @@protoc_insertion_point(destructor:fixbug.GetFriendResultCode)
  SharedDtor();
}

void GetFriendResultCode::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetFriendResultCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendResultCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendResultCode_descriptor_;
}

const GetFriendResultCode& GetFriendResultCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

GetFriendResultCode* GetFriendResultCode::default_instance_ = NULL;

GetFriendResultCode* GetFriendResultCode::New(::google::protobuf::Arena* arena) const {
  GetFriendResultCode* n = new GetFriendResultCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFriendResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.GetFriendResultCode)
  errcode_ = 0;
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetFriendResultCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.GetFriendResultCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional bytes errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.GetFriendResultCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.GetFriendResultCode)
  return false;
#undef DO_
}

void GetFriendResultCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.GetFriendResultCode)
  // optional int32 errcode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }

  // optional bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->errmsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.GetFriendResultCode)
}

::google::protobuf::uint8* GetFriendResultCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.GetFriendResultCode)
  // optional int32 errcode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }

  // optional bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->errmsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.GetFriendResultCode)
  return target;
}

int GetFriendResultCode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.GetFriendResultCode)
  int total_size = 0;

  // optional int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  // optional bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->errmsg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendResultCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.GetFriendResultCode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFriendResultCode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendResultCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.GetFriendResultCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.GetFriendResultCode)
    MergeFrom(*source);
  }
}

void GetFriendResultCode::MergeFrom(const GetFriendResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.GetFriendResultCode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void GetFriendResultCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.GetFriendResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendResultCode::CopyFrom(const GetFriendResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.GetFriendResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendResultCode::IsInitialized() const {

  return true;
}

void GetFriendResultCode::Swap(GetFriendResultCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendResultCode::InternalSwap(GetFriendResultCode* other) {
  std::swap(errcode_, other->errcode_);
  errmsg_.Swap(&other->errmsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFriendResultCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendResultCode_descriptor_;
  metadata.reflection = GetFriendResultCode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFriendResultCode

// optional int32 errcode = 1;
void GetFriendResultCode::clear_errcode() {
  errcode_ = 0;
}
 ::google::protobuf::int32 GetFriendResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendResultCode.errcode)
  return errcode_;
}
 void GetFriendResultCode::set_errcode(::google::protobuf::int32 value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:fixbug.GetFriendResultCode.errcode)
}

// optional bytes errmsg = 2;
void GetFriendResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetFriendResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendResultCode.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetFriendResultCode::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.GetFriendResultCode.errmsg)
}
 void GetFriendResultCode::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.GetFriendResultCode.errmsg)
}
 void GetFriendResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetFriendResultCode.errmsg)
}
 ::std::string* GetFriendResultCode::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendResultCode.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetFriendResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:fixbug.GetFriendResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetFriendResultCode::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:fixbug.GetFriendResultCode.errmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendRequest::kIdFieldNumber;
const int GetFriendRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendRequest::GetFriendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.GetFriendRequest)
}

void GetFriendRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetFriendRequest::GetFriendRequest(const GetFriendRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.GetFriendRequest)
}

void GetFriendRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
}

GetFriendRequest::~GetFriendRequest() {
  // @@protoc_insertion_point(destructor:fixbug.GetFriendRequest)
  SharedDtor();
}

void GetFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendRequest_descriptor_;
}

const GetFriendRequest& GetFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

GetFriendRequest* GetFriendRequest::default_instance_ = NULL;

GetFriendRequest* GetFriendRequest::New(::google::protobuf::Arena* arena) const {
  GetFriendRequest* n = new GetFriendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.GetFriendRequest)
  id_ = 0u;
  name_.Clear();
}

bool GetFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.GetFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // repeated bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.GetFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.GetFriendRequest)
  return false;
#undef DO_
}

void GetFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.GetFriendRequest)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated bytes name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(i), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.GetFriendRequest)
}

::google::protobuf::uint8* GetFriendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.GetFriendRequest)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated bytes name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->name(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.GetFriendRequest)
  return target;
}

int GetFriendRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.GetFriendRequest)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // repeated bytes name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->name(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.GetFriendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFriendRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.GetFriendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.GetFriendRequest)
    MergeFrom(*source);
  }
}

void GetFriendRequest::MergeFrom(const GetFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.GetFriendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  name_.MergeFrom(from.name_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GetFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.GetFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendRequest::CopyFrom(const GetFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.GetFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendRequest::IsInitialized() const {

  return true;
}

void GetFriendRequest::Swap(GetFriendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendRequest::InternalSwap(GetFriendRequest* other) {
  std::swap(id_, other->id_);
  name_.UnsafeArenaSwap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendRequest_descriptor_;
  metadata.reflection = GetFriendRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFriendRequest

// optional uint32 id = 1;
void GetFriendRequest::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 GetFriendRequest::id() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendRequest.id)
  return id_;
}
 void GetFriendRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:fixbug.GetFriendRequest.id)
}

// repeated bytes name = 2;
int GetFriendRequest::name_size() const {
  return name_.size();
}
void GetFriendRequest::clear_name() {
  name_.Clear();
}
 const ::std::string& GetFriendRequest::name(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendRequest.name)
  return name_.Get(index);
}
 ::std::string* GetFriendRequest::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendRequest.name)
  return name_.Mutable(index);
}
 void GetFriendRequest::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetFriendRequest.name)
  name_.Mutable(index)->assign(value);
}
 void GetFriendRequest::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbug.GetFriendRequest.name)
}
 void GetFriendRequest::set_name(int index, const void* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetFriendRequest.name)
}
 ::std::string* GetFriendRequest::add_name() {
  // @@protoc_insertion_point(field_add_mutable:fixbug.GetFriendRequest.name)
  return name_.Add();
}
 void GetFriendRequest::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbug.GetFriendRequest.name)
}
 void GetFriendRequest::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbug.GetFriendRequest.name)
}
 void GetFriendRequest::add_name(const void* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbug.GetFriendRequest.name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetFriendRequest::name() const {
  // @@protoc_insertion_point(field_list:fixbug.GetFriendRequest.name)
  return name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetFriendRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.GetFriendRequest.name)
  return &name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendResponse::kResultFieldNumber;
const int GetFriendResponse::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendResponse::GetFriendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.GetFriendResponse)
}

void GetFriendResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  result_ = const_cast< ::fixbug::GetFriendResultCode*>(&::fixbug::GetFriendResultCode::default_instance());
}

GetFriendResponse::GetFriendResponse(const GetFriendResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.GetFriendResponse)
}

void GetFriendResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
}

GetFriendResponse::~GetFriendResponse() {
  // @@protoc_insertion_point(destructor:fixbug.GetFriendResponse)
  SharedDtor();
}

void GetFriendResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendResponse_descriptor_;
}

const GetFriendResponse& GetFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

GetFriendResponse* GetFriendResponse::default_instance_ = NULL;

GetFriendResponse* GetFriendResponse::New(::google::protobuf::Arena* arena) const {
  GetFriendResponse* n = new GetFriendResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.GetFriendResponse)
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
  name_.Clear();
}

bool GetFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.GetFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fixbug.GetFriendResultCode result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // repeated bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.GetFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.GetFriendResponse)
  return false;
#undef DO_
}

void GetFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.GetFriendResponse)
  // optional .fixbug.GetFriendResultCode result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // repeated bytes name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(i), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.GetFriendResponse)
}

::google::protobuf::uint8* GetFriendResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.GetFriendResponse)
  // optional .fixbug.GetFriendResultCode result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, false, target);
  }

  // repeated bytes name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->name(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.GetFriendResponse)
  return target;
}

int GetFriendResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.GetFriendResponse)
  int total_size = 0;

  // optional .fixbug.GetFriendResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  // repeated bytes name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->name(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.GetFriendResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFriendResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.GetFriendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.GetFriendResponse)
    MergeFrom(*source);
  }
}

void GetFriendResponse::MergeFrom(const GetFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.GetFriendResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  name_.MergeFrom(from.name_);
  if (from.has_result()) {
    mutable_result()->::fixbug::GetFriendResultCode::MergeFrom(from.result());
  }
}

void GetFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.GetFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendResponse::CopyFrom(const GetFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.GetFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendResponse::IsInitialized() const {

  return true;
}

void GetFriendResponse::Swap(GetFriendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendResponse::InternalSwap(GetFriendResponse* other) {
  std::swap(result_, other->result_);
  name_.UnsafeArenaSwap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendResponse_descriptor_;
  metadata.reflection = GetFriendResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFriendResponse

// optional .fixbug.GetFriendResultCode result = 1;
bool GetFriendResponse::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void GetFriendResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::fixbug::GetFriendResultCode& GetFriendResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::fixbug::GetFriendResultCode* GetFriendResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::fixbug::GetFriendResultCode;
  }
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendResponse.result)
  return result_;
}
::fixbug::GetFriendResultCode* GetFriendResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.GetFriendResponse.result)
  
  ::fixbug::GetFriendResultCode* temp = result_;
  result_ = NULL;
  return temp;
}
void GetFriendResponse::set_allocated_result(::fixbug::GetFriendResultCode* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fixbug.GetFriendResponse.result)
}

// repeated bytes name = 2;
int GetFriendResponse::name_size() const {
  return name_.size();
}
void GetFriendResponse::clear_name() {
  name_.Clear();
}
 const ::std::string& GetFriendResponse::name(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendResponse.name)
  return name_.Get(index);
}
 ::std::string* GetFriendResponse::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendResponse.name)
  return name_.Mutable(index);
}
 void GetFriendResponse::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetFriendResponse.name)
  name_.Mutable(index)->assign(value);
}
 void GetFriendResponse::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbug.GetFriendResponse.name)
}
 void GetFriendResponse::set_name(int index, const void* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetFriendResponse.name)
}
 ::std::string* GetFriendResponse::add_name() {
  // @@protoc_insertion_point(field_add_mutable:fixbug.GetFriendResponse.name)
  return name_.Add();
}
 void GetFriendResponse::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbug.GetFriendResponse.name)
}
 void GetFriendResponse::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbug.GetFriendResponse.name)
}
 void GetFriendResponse::add_name(const void* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbug.GetFriendResponse.name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetFriendResponse::name() const {
  // @@protoc_insertion_point(field_list:fixbug.GetFriendResponse.name)
  return name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetFriendResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.GetFriendResponse.name)
  return &name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GetFriendServiceRpc::~GetFriendServiceRpc() {}

const ::google::protobuf::ServiceDescriptor* GetFriendServiceRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendServiceRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* GetFriendServiceRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendServiceRpc_descriptor_;
}

void GetFriendServiceRpc::Getfriend(::google::protobuf::RpcController* controller,
                         const ::fixbug::GetFriendRequest*,
                         ::fixbug::GetFriendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Getfriend() not implemented.");
  done->Run();
}

void GetFriendServiceRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), GetFriendServiceRpc_descriptor_);
  switch(method->index()) {
    case 0:
      Getfriend(controller,
             ::google::protobuf::down_cast<const ::fixbug::GetFriendRequest*>(request),
             ::google::protobuf::down_cast< ::fixbug::GetFriendResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GetFriendServiceRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::GetFriendRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GetFriendServiceRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::GetFriendResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GetFriendServiceRpc_Stub::GetFriendServiceRpc_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GetFriendServiceRpc_Stub::GetFriendServiceRpc_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GetFriendServiceRpc_Stub::~GetFriendServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void GetFriendServiceRpc_Stub::Getfriend(::google::protobuf::RpcController* controller,
                              const ::fixbug::GetFriendRequest* request,
                              ::fixbug::GetFriendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)
