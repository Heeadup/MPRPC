// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef PROTOBUF_friend_2eproto__INCLUDED
#define PROTOBUF_friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fixbug {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_friend_2eproto();
void protobuf_AssignDesc_friend_2eproto();
void protobuf_ShutdownFile_friend_2eproto();

class GetFriendRequest;
class GetFriendResponse;
class GetFriendResultCode;

// ===================================================================

class GetFriendResultCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.GetFriendResultCode) */ {
 public:
  GetFriendResultCode();
  virtual ~GetFriendResultCode();

  GetFriendResultCode(const GetFriendResultCode& from);

  inline GetFriendResultCode& operator=(const GetFriendResultCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendResultCode& default_instance();

  void Swap(GetFriendResultCode* other);

  // implements Message ----------------------------------------------

  inline GetFriendResultCode* New() const { return New(NULL); }

  GetFriendResultCode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFriendResultCode& from);
  void MergeFrom(const GetFriendResultCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetFriendResultCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errcode = 1;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // optional bytes errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:fixbug.GetFriendResultCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 errcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static GetFriendResultCode* default_instance_;
};
// -------------------------------------------------------------------

class GetFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.GetFriendRequest) */ {
 public:
  GetFriendRequest();
  virtual ~GetFriendRequest();

  GetFriendRequest(const GetFriendRequest& from);

  inline GetFriendRequest& operator=(const GetFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendRequest& default_instance();

  void Swap(GetFriendRequest* other);

  // implements Message ----------------------------------------------

  inline GetFriendRequest* New() const { return New(NULL); }

  GetFriendRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFriendRequest& from);
  void MergeFrom(const GetFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // repeated bytes name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  void set_name(int index, const char* value);
  void set_name(int index, const void* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  void add_name(const char* value);
  void add_name(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:fixbug.GetFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static GetFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.GetFriendResponse) */ {
 public:
  GetFriendResponse();
  virtual ~GetFriendResponse();

  GetFriendResponse(const GetFriendResponse& from);

  inline GetFriendResponse& operator=(const GetFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendResponse& default_instance();

  void Swap(GetFriendResponse* other);

  // implements Message ----------------------------------------------

  inline GetFriendResponse* New() const { return New(NULL); }

  GetFriendResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFriendResponse& from);
  void MergeFrom(const GetFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fixbug.GetFriendResultCode result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::fixbug::GetFriendResultCode& result() const;
  ::fixbug::GetFriendResultCode* mutable_result();
  ::fixbug::GetFriendResultCode* release_result();
  void set_allocated_result(::fixbug::GetFriendResultCode* result);

  // repeated bytes name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  void set_name(int index, const char* value);
  void set_name(int index, const void* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  void add_name(const char* value);
  void add_name(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:fixbug.GetFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::fixbug::GetFriendResultCode* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static GetFriendResponse* default_instance_;
};
// ===================================================================

class GetFriendServiceRpc_Stub;

class GetFriendServiceRpc : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GetFriendServiceRpc() {};
 public:
  virtual ~GetFriendServiceRpc();

  typedef GetFriendServiceRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Getfriend(::google::protobuf::RpcController* controller,
                       const ::fixbug::GetFriendRequest* request,
                       ::fixbug::GetFriendResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GetFriendServiceRpc);
};

class GetFriendServiceRpc_Stub : public GetFriendServiceRpc {
 public:
  GetFriendServiceRpc_Stub(::google::protobuf::RpcChannel* channel);
  GetFriendServiceRpc_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~GetFriendServiceRpc_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements GetFriendServiceRpc ------------------------------------------

  void Getfriend(::google::protobuf::RpcController* controller,
                       const ::fixbug::GetFriendRequest* request,
                       ::fixbug::GetFriendResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GetFriendServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFriendResultCode

// optional int32 errcode = 1;
inline void GetFriendResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::google::protobuf::int32 GetFriendResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendResultCode.errcode)
  return errcode_;
}
inline void GetFriendResultCode::set_errcode(::google::protobuf::int32 value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:fixbug.GetFriendResultCode.errcode)
}

// optional bytes errmsg = 2;
inline void GetFriendResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendResultCode.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendResultCode::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.GetFriendResultCode.errmsg)
}
inline void GetFriendResultCode::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.GetFriendResultCode.errmsg)
}
inline void GetFriendResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetFriendResultCode.errmsg)
}
inline ::std::string* GetFriendResultCode::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendResultCode.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:fixbug.GetFriendResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendResultCode::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:fixbug.GetFriendResultCode.errmsg)
}

// -------------------------------------------------------------------

// GetFriendRequest

// optional uint32 id = 1;
inline void GetFriendRequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 GetFriendRequest::id() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendRequest.id)
  return id_;
}
inline void GetFriendRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:fixbug.GetFriendRequest.id)
}

// repeated bytes name = 2;
inline int GetFriendRequest::name_size() const {
  return name_.size();
}
inline void GetFriendRequest::clear_name() {
  name_.Clear();
}
inline const ::std::string& GetFriendRequest::name(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendRequest.name)
  return name_.Get(index);
}
inline ::std::string* GetFriendRequest::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendRequest.name)
  return name_.Mutable(index);
}
inline void GetFriendRequest::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetFriendRequest.name)
  name_.Mutable(index)->assign(value);
}
inline void GetFriendRequest::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbug.GetFriendRequest.name)
}
inline void GetFriendRequest::set_name(int index, const void* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetFriendRequest.name)
}
inline ::std::string* GetFriendRequest::add_name() {
  // @@protoc_insertion_point(field_add_mutable:fixbug.GetFriendRequest.name)
  return name_.Add();
}
inline void GetFriendRequest::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbug.GetFriendRequest.name)
}
inline void GetFriendRequest::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbug.GetFriendRequest.name)
}
inline void GetFriendRequest::add_name(const void* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbug.GetFriendRequest.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetFriendRequest::name() const {
  // @@protoc_insertion_point(field_list:fixbug.GetFriendRequest.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetFriendRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.GetFriendRequest.name)
  return &name_;
}

// -------------------------------------------------------------------

// GetFriendResponse

// optional .fixbug.GetFriendResultCode result = 1;
inline bool GetFriendResponse::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
inline void GetFriendResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
inline const ::fixbug::GetFriendResultCode& GetFriendResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::fixbug::GetFriendResultCode* GetFriendResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::fixbug::GetFriendResultCode;
  }
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendResponse.result)
  return result_;
}
inline ::fixbug::GetFriendResultCode* GetFriendResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.GetFriendResponse.result)
  
  ::fixbug::GetFriendResultCode* temp = result_;
  result_ = NULL;
  return temp;
}
inline void GetFriendResponse::set_allocated_result(::fixbug::GetFriendResultCode* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fixbug.GetFriendResponse.result)
}

// repeated bytes name = 2;
inline int GetFriendResponse::name_size() const {
  return name_.size();
}
inline void GetFriendResponse::clear_name() {
  name_.Clear();
}
inline const ::std::string& GetFriendResponse::name(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendResponse.name)
  return name_.Get(index);
}
inline ::std::string* GetFriendResponse::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendResponse.name)
  return name_.Mutable(index);
}
inline void GetFriendResponse::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fixbug.GetFriendResponse.name)
  name_.Mutable(index)->assign(value);
}
inline void GetFriendResponse::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbug.GetFriendResponse.name)
}
inline void GetFriendResponse::set_name(int index, const void* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbug.GetFriendResponse.name)
}
inline ::std::string* GetFriendResponse::add_name() {
  // @@protoc_insertion_point(field_add_mutable:fixbug.GetFriendResponse.name)
  return name_.Add();
}
inline void GetFriendResponse::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbug.GetFriendResponse.name)
}
inline void GetFriendResponse::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbug.GetFriendResponse.name)
}
inline void GetFriendResponse::add_name(const void* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbug.GetFriendResponse.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetFriendResponse::name() const {
  // @@protoc_insertion_point(field_list:fixbug.GetFriendResponse.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetFriendResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.GetFriendResponse.name)
  return &name_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_2eproto__INCLUDED
